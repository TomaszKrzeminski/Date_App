@model RoutingViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html class='use-all-space'>
<head>
    <meta http-equiv='X-UA-Compatible' content='IE=Edge' />
    <meta charset='UTF-8'>
    <title>Maps SDK for Web - Static route</title>
    <meta name='viewport'
          content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no' />
    <link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
    <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.64.0/maps/maps.css'>
    <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.64.0/maps/css-styles/routing.css' />
    @*<link rel='stylesheet' type='text/css' href='../assets/ui-library/index.css' />*@
    <style>

        #map {
            width: 700px;
            height: 700px;
        }

        .icon {
            background-size: cover;
            height: 30px;
            width: 30px;
        }

        .route-marker {
            align-items: center;
            background-color: #4a90e2;
            border: solid 3px #2faaff;
            border-radius: 50%;
            display: flex;
            height: 32px;
            justify-content: center;
            transition: width .1s, height .1s;
            width: 32px;
        }

        /*html {
            height: 70%;
        }*/




    </style>
</head>

<body>
    <input id="PLa" type="hidden" value=@Model.PairLatitude>
    <input id="PLo" type="hidden" value=@Model.PairLongitude>
    <input id="ULa" type="hidden" value=@Model.UserLatitude>
    <input id="ULo" type="hidden" value=@Model.UserLongitude>
    <div class="container">
        <div class="row">
            <div class="col col-lg-2">

            </div>
            <div class="col col-lg-8">
                <div id='map' class='map'></div>
            </div>
            <div class="col col-lg-2">

            </div>
        </div>





        <table class="table table-striped">
            <thead>
                <tr>

                    <th scope="col">Dystans</th>
                    <th scope="col">Czas wyjazdu</th>
                    <th scope="col">Czas przybycia</th>
                    <th scope="col">Łączny czas</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td id="lengthInMeters">@*@Model.details.Distance*@</td>
                    <td id="departureTime">@*@Model.details.departureTime*@</td>
                    <td id="arrivalTime">@*@Model.details.arrivalTime*@</td>
                    <td id="travelTimeInSeconds">@*@Model.details.travelTimeInSeconds*@</td>
                </tr>

            </tbody>
        </table>


       


        <table class="table table-striped">
            <thead>
                <tr>

                    <th scope="col">Miasto</th>
                    <th scope="col">Temperatura</th>
                    <th scope="col">Temperatura min</th>
                    <th scope="col">Temperatura max</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td >@Model.details.City</td>
                    <td >@Model.details.Temp</td>
                    <td>@Model.details.Temp_Min</td>
                    <td>@Model.details.Temp_Max</td>
                </tr>

            </tbody>
        </table>




    </div>

    <script src='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.64.0/maps/maps-web.min.js'></script>
    <script src='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.64.0/services/services-web.min.js'></script>
    @*<script type='text/javascript' src='../assets/js/mobile-or-tablet.js'></script>*@
    <script>


        $(document).ready(function () {



            var map = tt.map({
                key: 'YKCJ1ZeW4GdxXOmONZi4UoSKOKpOTT4O',
                container: 'map',
                style: 'tomtom://vector/1/basic-main',
                dragPan: true
            });
            map.addControl(new tt.FullscreenControl());
            map.addControl(new tt.NavigationControl());


            function MakeRoutingCoordinates() {
                var uLo = $('#ULo').val();
                var uLa = $('#ULa').val();
                var pLo = $('#PLo').val();
                var pLa = $('#PLa').val();

                var text = uLo + "," + uLa + ":" + pLo + "," + pLa;

                return text;
            }


            function createMarkerElement(type) {
                var element = document.createElement('div');
                var innerElement = document.createElement('div');

                element.className = 'route-marker';
                innerElement.className = 'icon tt-icon -white -' + type;
                element.appendChild(innerElement);
                return element;
            }

            function addMarkers(feature) {
                var startPoint, endPoint;
                if (feature.geometry.type === 'MultiLineString') {
                    startPoint = feature.geometry.coordinates[0][0]; //get first point from first line
                    endPoint = feature.geometry.coordinates.slice(-1)[0].slice(-1)[0]; //get last point from last line
                } else {
                    startPoint = feature.geometry.coordinates[0];
                    endPoint = feature.geometry.coordinates.slice(-1)[0];
                }

                new tt.Marker({ element: createMarkerElement('start') }).setLngLat(startPoint).addTo(map);
                new tt.Marker({ element: createMarkerElement('finish') }).setLngLat(endPoint).addTo(map);
            }

            function findFirstBuildingLayerId() {
                var layers = map.getStyle().layers;
                for (var index in layers) {
                    if (layers[index].type === 'fill-extrusion') {
                        return layers[index].id;
                    }
                }

                throw new Error('Map style does not contain any layer with fill-extrusion type.');
            }

            map.once('load', function () {
                tt.services.calculateRoute({
                    key: 'YKCJ1ZeW4GdxXOmONZi4UoSKOKpOTT4O',
                    traffic: false,
                    locations: MakeRoutingCoordinates()  /*'4.8786,52.3679:4.8798,52.3679'*/
                })
                    .go()
                    .then(function (response) {

                        arrivalTime: "2020-10-31T11:40:49+01:00"
                        departureTime: "2020-10-31T09:02:32+01:00"
                        lengthInMeters: 282102
                        trafficDelayInSeconds: 0
                        travelTimeInSeconds: 949


                        var geojson = response.toGeoJson();

                        var lengthInMeters = geojson["features"][0]["properties"]["summary"]["lengthInMeters"];
                        var departureTime = geojson["features"][0]["properties"]["summary"]["departureTime"];
                        var arrivalTime = geojson["features"][0]["properties"]["summary"]["arrivalTime"];
                        var travelTimeInSeconds = geojson["features"][0]["properties"]["summary"]["travelTimeInSeconds"];

                        departureTime = departureTime.replace("T", " ");                       
                        departureTime = departureTime.split('+')[0];;
                        arrivalTime = arrivalTime.replace("T", " ");
                        arrivalTime = arrivalTime.split('+')[0];;

                        function makeKmfromMeters(meters)
                        {

                            if (meters < 1000) {
                                return "Mniej niż kilometr";
                            }
                            else
                            {
                                return meters / 1000 + "  km";
                            }


                        }


                        function changeSecondsToHoursMinutesSeconds(seconds)
                        {


                            var total = seconds;
                            var hours = Math.floor( total / 3600);
                            var r1 = total % 3600;
                            var minutes = Math.floor( r1 / 60);
                            r2 = r1 % 60;
                            var seconds = r2;

                            var time = hours + " godz : " + minutes + " min : " + seconds +" sek";                    

                            return time;
                        }




                        lengthInMeters = makeKmfromMeters(lengthInMeters);
                        travelTimeInSeconds = changeSecondsToHoursMinutesSeconds(travelTimeInSeconds);



                        $("#lengthInMeters").html(lengthInMeters);
                        $("#departureTime").html(departureTime);
                        $("#arrivalTime").html(arrivalTime);
                        $("#travelTimeInSeconds").html(travelTimeInSeconds);

                        //var distance =geojson
                        //var distance = geojson
                        //var time = geojson


                        map.addLayer({
                            'id': 'route',
                            'type': 'line',
                            'source': {
                                'type': 'geojson',
                                'data': geojson
                            },
                            'paint': {
                                'line-color': '#4a90e2',
                                'line-width': 8
                            }
                        }, findFirstBuildingLayerId());

                        addMarkers(geojson.features[0]);

                        var bounds = new tt.LngLatBounds();
                        geojson.features[0].geometry.coordinates.forEach(function (point) {
                            bounds.extend(tt.LngLat.convert(point));
                        });
                        map.fitBounds(bounds, { duration: 0, padding: 50 });
                    });
            });








        });


        
    </script>
</body>
</html>