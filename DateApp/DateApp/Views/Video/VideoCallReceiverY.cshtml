@model VideoCallViewModel
@{
    ViewData["Title"] = "VideoCallReceiver";
    Layout = "_PeerJs";
}




<div class="container-fluid">

    <div class="row">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <h6>Dzwonisz do : @Model.CallerEmail</h6>
                    </th>
                    <th>

                    </th>
                    <th>

                    </th>
                    <th class="text-lg-right">
                        <img class="img-thumbnail" style="border-style:outset;max-width:40px;max-height:40px;" src=@Model.CallerPicturePath width="100" height="100">
                        <button class="btn btn-success" id="ShowMessagesButton">Status</button>
                    </th>
                </tr>

            </thead>


        </table>
    </div>
    <div class="row">
        <div class="col-lg-2"></div>
        <div id="AdvancedMessages" class="col-lg-8">
            <div class="col-lg-12">
                <h2 class="text-center">VideoCallReceiver</h2>
            </div>
            <div id="TextMessage">
            </div>
        </div>
        <div class="col-lg-2"></div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <input type="hidden" id="ReceiverId" />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-2">
            <video style="max-height:215px; max-width:160px;" id="Second"></video>
        </div>

        <div class="col-lg-8">

            <video id="MyVideo"></video>
        </div>

        <div class="col-lg-2 ">

        </div>
    </div>

    <div class="row">
        <div class="col-lg-2"></div>
        /////***
        <div class="col-lg-8">

            <table style="max-width:480px;" class="table table-striped table-hover">

                <thead id="Messages">

                </thead>
            </table>
        </div>
        //////***
        <div class="col-lg-2 ">

        </div>
    </div>
    <div class="row">
        <div class="col-lg-2"></div>
        <div class="col-lg-8">

            <div class="row">

                <div class="col-lg-6">
                    <textarea class="form-control" id="sendMessageBox" rows="4" placeholder="Wpisz wiadomość..."></textarea>

                </div>
                <div class="col-lg-6"></div>
                <div class="col-lg-4">
                    <button class="btn btn-warning" type="button" id="sendButton">Wyślij</button>
                    <button class="btn btn-danger" type="button" id="clearMsgsButton">Wyczyść okno wiadomości</button>
                </div>
                <div class="col-lg-4"></div>
                <div class="col-lg-4"></div>



            </div>
            <div class="col-lg-2 float-left">

            </div>
        </div>



    </div>
    ///

    <table style="display:none;" id="AllMessages">

        <thead >

        </thead>
    </table>

    ///
    <div class="col-lg-6">
        <nav aria-label="...">
            <ul class="pagination">
                <li>
                    <a class="page-link" id="Current"></a>
                </li>
                <li class="page-item ">
                    <a id="Previous" class="page-link " tabindex="-1">Previous</a>
                </li>

                <li id="change">

                </li>





                <li class="page-item">
                    <a id="Next" class="page-link ">Next</a>
                </li>
                <li>
                    <a class="page-link" id="Total"></a>
                </li>
            </ul>
        </nav>
    </div>



    ////

</div>

<script src="https://cdn.jsdelivr.net/npm/peerjs@1.2.0/dist/peerjs.min.js"></script>
<script type="text/javascript">

   


    function Hide() {
        $("#AdvancedMessages").hide();
    };
    Hide();



    $("#ShowMessagesButton").click(function () {

        if ($("#AdvancedMessages").is(":hidden")) {

            $("#AdvancedMessages").slideDown();

        } else {
            $("#AdvancedMessages").slideUp();
        }

    });











            (function () {

                var lastPeerId = null;
                var peer = null; // Own peer object
                var peerId = null;
                var conn = null;
                var recvId = document.getElementById("receiver-id");
                //var status = document.getElementById("status");
                var message = document.getElementById("message");
                //var standbyBox = document.getElementById("standby");
                //var goBox = document.getElementById("go");
                //var fadeBox = document.getElementById("fade");
                //var offBox = document.getElementById("off");
                var sendMessageBox = document.getElementById("sendMessageBox");
                var sendButton = document.getElementById("sendButton");
                //var clearMsgsButton = document.getElementById("clearMsgsButton");
                var Messages = document.getElementById("Messages");
                var AllMessages = document.getElementById('AllMessages');
                var pageNumber ;
                var totalPages = 1;
                 var pageSize = 4;
                var Skip;
                    var count ;
                var clear = document.getElementById("clearMsgsButton");
                /**
                 * Create the Peer object for our end of the connection.
                 *
                 * Sets up callbacks that handle any events related to our
                 * peer object.
                 */


                function skip() {

                    Skip = ((pageNumber - 1) * pageSize);

                }


                function Count() {
                    count = $('#AllMessages tr').length;
                }


                function TotalPages()
                {
                    totalPages = Math.ceil(count / pageSize); 
                }


               
               
               
                 
                function showPageNumber() {

                    $('#Current').text(totalPages);
                    $('#Total').text(totalPages);



                }





                function ShowPages2() {

                  var max = Math.ceil(count / pageSize); 

                    var table = document.getElementById('AllMessages');
                    var rowsCount = $('#AllMessages tr').length;
                    var pageN = $('#Current').text();
                    ////

                    Messages.innerHTML = "";
                  

                    

                        var start;
                        var stop;
                        var check = (pageSize * pageN) ;

                       
                    if (max > pageN) {
                        start = (pageSize * pageN) - 4;
                        stop = check;
                    }
                    else if (max == pageN && rowsCount == (pageSize * pageN))
                    {
                        start = (pageSize * pageN) - 4;
                        stop = check;
                    }
                    else
                    {
                        start = (pageSize * pageN) - 4;
                        stop = rowsCount ;
                    }

                       

                      

                        for (var i = start; i < stop; i += 1) {


                            Messages.innerHTML += table.rows[i].innerHTML;

                        }

                    


                }

                function ShowPages() {


                    var table = document.getElementById('AllMessages');
                    var rowsCount = $('#AllMessages tr').length;
                    var pageN = $('#Current').text();
                    ////

                    Messages.innerHTML = "";


                    if (rowsCount <= 4) {
                        Messages.innerHTML += table.rows[0].innerHTML;
                        Messages.innerHTML += table.rows[1].innerHTML;
                        Messages.innerHTML += table.rows[2].innerHTML;
                        Messages.innerHTML += table.rows[3].innerHTML;

                    }
                    else {

                        var start = (rowsCount - pageSize);
                        var stop;
                        var check = (pageSize * pageN);


                        if (check < (rowsCount - 1)) {

                            stop = check - 2;
                        }
                        else {

                            stop = check;

                        }



                        for (var i = start; i < stop; i += 1) {


                            Messages.innerHTML += table.rows[i].innerHTML;

                        }

                    }


                }
                



                function TextMessages(text) {
                    TextMessage = document.getElementById('TextMessage');
                    TextMessage.innerHTML += "<div class=\"col-lg-12\"><h4>..." + text.replace('\^', '\'') + "...</h4></div>";
                }



                $('#Previous').click
                    (
                    function () {
                       
                        var pageN = parseInt($('#Current').text(), 10);
                        pageNumber = pageN;
                        if (pageNumber > 1) {                         
                           
                            pageNumber -= 1;
                            $('#Current').text(pageNumber);
                            ShowPages2();
                           
                        }




                    }

                    );
                $('#Next').click
                    (

                    function () {                        
                        
                        var pageN =parseInt($('#Current').text(), 10);
                        pageNumber = pageN;
                        if (pageNumber < totalPages && totalPages > 1) {                           
                           
                            pageNumber += 1;
                            $('#Current').text(pageNumber);
                            ShowPages2();
                           
                        }

                    }

                    );












                function AddMessage(type, text) {


                    TotalPages();
                    showPageNumber();

                    if (type == "s") {

                        //Messages.innerHTML += "<tr  class=\"table-active\"     ><th>Ja   </th></tr> <tr> <th> " + text + " </th></tr >";
                        AllMessages.innerHTML += "<tr  class=\"table-active\"     ><th>Ja   </th></tr> <tr> <th> " + text + " </th></tr >";
                    }
                    else if (type == "r") {
                        //Messages.innerHTML += "<tr  class=\"table-active\"    ><th>Nadawca  </th></tr> <tr> <th> " + text + " </th></tr >";
                        AllMessages.innerHTML += "<tr  class=\"table-active\"    ><th>Nadawca  </th></tr> <tr> <th> " + text + " </th></tr >";
                    }



                    skip();
                    Count();                                                       
                   
                    if (count <= 0) {
                        count = 1;
                    }                   

                    TotalPages();                                                
                                                    


                    showPageNumber();
                    ShowPages();
                }




                function initialize() {
                    // Create own peer object with connection to shared PeerJS server
                    peer = new Peer(null, {
                        debug: 2
                    });

                    peer.on('open', function (id) {
                        //alert(id);
                        // Workaround for peer.reconnect deleting previous id
                        if (peer.id === null) {

                            TextMessages('Received null id from peer open')

                            console.log('Received null id from peer open');
                            peer.id = lastPeerId;
                        } else {
                            lastPeerId = peer.id;
                        }

                        console.log('ID: ' + peer.id);
                        //recvId.innerHTML = "ID: " + peer.id;
                        TextMessages("Peer Id is : " + peer.id);
                        TextMessages("Awaiting connection...");

                        status.innerHTML = "Awaiting connection...";
                    });
                    peer.on('connection', function (c) {
                        // Allow only a single connection
                        if (conn && conn.open) {
                            c.on('open', function () {
                                c.send("Already connected to another client");

                                "Awaiting connection..."

                                setTimeout(function () { c.close(); }, 500);
                            });
                            return;
                        }

                        conn = c;
                        console.log("Connected to: " + conn.peer);
                        status.innerHTML = "Connected";
                        ready();
                        //ReceiveCall();





                    });
                    peer.on('disconnected', function () {
                        status.innerHTML = "Connection lost. Please reconnect";
                        console.log('Connection lost. Please reconnect');

                        // Workaround for peer.reconnect deleting previous id
                        peer.id = lastPeerId;
                        peer._lastServerId = lastPeerId;
                        peer.reconnect();
                    });
                    peer.on('close', function () {
                        conn = null;
                        status.innerHTML = "Connection destroyed. Please refresh";
                        console.log('Connection destroyed');
                    });
                    peer.on('error', function (err) {
                        console.log(err);
                        alert('' + err);
                    });
                };

                /**
                 * Triggered once a connection has been achieved.
                 * Defines callbacks to handle incoming data and connection events.
                 */
                function ready() {
                    conn.on('data', function (data) {



                        AddMessage("r", data);

                    });
                    conn.on('close', function () {
                        status.innerHTML = "Connection reset<br>Awaiting connection...";
                        conn = null;
                    });
                }

                function go() {
                    standbyBox.className = "display-box hidden";
                    goBox.className = "display-box go";
                    fadeBox.className = "display-box hidden";
                    offBox.className = "display-box hidden";
                    return;
                };

                function fade() {
                    standbyBox.className = "display-box hidden";
                    goBox.className = "display-box hidden";
                    fadeBox.className = "display-box fade";
                    offBox.className = "display-box hidden";
                    return;
                };

                function off() {
                    standbyBox.className = "display-box hidden";
                    goBox.className = "display-box hidden";
                    fadeBox.className = "display-box hidden";
                    offBox.className = "display-box off";
                    return;
                }

                function reset() {
                    standbyBox.className = "display-box standby";
                    goBox.className = "display-box hidden";
                    fadeBox.className = "display-box hidden";
                    offBox.className = "display-box hidden";
                    return;
                };

                function addMessage(msg) {
                    var now = new Date();
                    var h = now.getHours();
                    var m = addZero(now.getMinutes());
                    var s = addZero(now.getSeconds());

                    if (h > 12)
                        h -= 12;
                    else if (h === 0)
                        h = 12;

                    function addZero(t) {
                        if (t < 10)
                            t = "0" + t;
                        return t;
                    };

                    message.innerHTML = "<br><span class=\"msg-time\">" + h + ":" + m + ":" + s + "</span>  -  " + msg + message.innerHTML;
                }

                function clearMessages() {
                    Messages.innerHTML = "";
                    AllMessages.innerHTML = "";
                    TextMessages("Czyszczę czat");
                }

                // Listen for enter in message box
                sendMessageBox.addEventListener('keypress', function (e) {
                    var event = e || window.event;
                    var char = event.which || event.keyCode;
                    if (char == '13')
                        sendButton.click();
                });
                // Send message
                sendButton.addEventListener('click', function () {
                    if (conn && conn.open) {
                        var msg = sendMessageBox.value;
                        sendMessageBox.value = "";
                        conn.send(msg);
                        console.log("Sent: " + msg);


                        AddMessage("s", msg);


                    } else {
                        console.log('Connection is closed');
                    }
                });

                // Clear messages box
                clear.addEventListener('click', clearMessages);



                initialize();



                /////SignalR

                var connectionVideo = new signalR.HubConnectionBuilder().withUrl("/videos").build();
                var ReceiverId =@Html.Raw( Json.Serialize(@Model.ReceiverId));

                connectionVideo.start().then(

                    () => {


                    }


                ).catch(function (err) {
                    alert("Błąd w Check Status");

                }).then(() => {


                });




                ////////



                connectionVideo.on("SendPeerId", function (SenderId)
                {



                    var PeerId = peer.id;

                    connectionVideo.invoke("SendPeerId", SenderId, PeerId).catch(function (err) {


                        alert("Błąd w SendPeerId");

                    });






                    var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                    peer.on('call', function (call) {
                        getUserMedia({ video: true, audio: true }, function (stream) {
                            call.answer(stream); // Answer the call with an A/V stream.
                            call.on('stream', function (remoteStream) {

                                var video = document.getElementById("MyVideo");
                                video.srcObject = stream;
                                video.play();


                                var video2 = document.getElementById("Second");
                                video2.srcObject = remoteStream;
                                video2.play();


                            });
                        }, function (err) {
                            console.log('Failed to get local stream', err);
                        });
                    });






                });







            })();
</script>
































