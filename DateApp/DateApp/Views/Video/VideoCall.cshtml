@model VideoCallViewModel



@{
    ViewData["Title"] = "VideoChat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<!doctype html>
<html>
<head>
    <title>WebRTC: Still photo capture demo</title>
    <meta charset='utf-8'>


    <style>
        Video {
            border: 1px solid black;
            box-shadow: 2px 2px 3px black;
            width: 320px;
            height: 240px;
        }

        #photo {
            border: 1px solid black;
            box-shadow: 2px 2px 3px black;
            width: 320px;
            height: 240px;
        }

        #canvas {
            display: none;
        }

        .camera {
            width: 340px;
            display: inline-block;
        }

        .output {
            width: 340px;
            display: inline-block;
        }

        #startbutton {
            display: block;
            position: relative;
            margin-left: auto;
            margin-right: auto;
            bottom: 32px;
            background-color: rgba(0, 150, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.7);
            box-shadow: 0px 0px 1px 2px rgba(0, 0, 0, 0.2);
            font-size: 14px;
            font-family: "Lucida Grande", "Arial", sans-serif;
            color: rgba(255, 255, 255, 1.0);
        }

        .contentarea {
            font-size: 16px;
            font-family: "Lucida Grande", "Arial", sans-serif;
            width: 760px;
        }
    </style>



</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2"></div>
            <div class="col-lg-8">
                <h1>
                    Rozmowa z użytkownikiem
                </h1>
                <h2>
                   UserEmail
                </h2>
            </div>
            <div class="col-lg-2"></div>


        </div>
        <div class="row">
            <div class="col-lg-4">

            </div>
            <div class="col-lg-4">
              
                <h3>Moja Kamera</h3>
                <div class="camera">
                    <video class="Video" id="video">Video stream not available.</video>
                    
                </div>
                <div>
                    <button class="btn-danger" id="Call">Zadzwoń</button>
                </div>
            </div>
            <div class="col-lg-4">

            </div>
        </div>
        <div class="row">
            <div class="col-lg-4">

            </div>
            <div class="col-lg-4">
                <div class="camera">
                    <video class="Video">Video stream not available.</video>
                </div>
                <div>
                    <a asp-action="Panel" asp-controller="Home" class="btn btn-warning">Wróć</a>
                </div>
               

            </div>
            <div class="col-lg-4">

            </div>
        </div>

    </div>

    <div>
        <input id="Receiver" value="@Model.ReceiverId" />
        <input id="Sender" value="@Model.CallerId" />
        <input id="=Message"  value="Test 1111"/>



    </div>




</body>







</html>


<script>


    function MyCameraStart() {

        const constraints = {
            video: true,
        };

        const video = document.querySelector("video");


        

            navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
                video.srcObject = stream;
                video.play();
            }).catch();


                
       
    }
    MyCameraStart();

    ///////SignalR

    var connection3 = new signalR.HubConnectionBuilder().withUrl("/videos").build();
    var ChatUserId =@Html.Raw( Json.Serialize(@Model.ReceiverId));

    connection3.on("Check", function (SenderId, Message) {

        alert(SenderId);
        alert(Message);

        document.getElementById("Message").value = Message;
        

    });

    /////

    function Check(text)
    {

        alert(text);

    }





    /////
    connection3.start().then(

        () => {

            //connection3.invoke("Ask_Chat_Users", names, ChatUserId
            //);

        }


    ).catch(function (err) {
        alert("Błąd w Check Status");

    }).then(() => {


    });




    /////////



    document.getElementById("Call").addEventListener("click", function (event) {
        var Caller = document.getElementById("Sender").value;
        var Receiver = document.getElementById("Receiver").value;
        //var message = document.getElementById("Message").value;
        var message = "Text text";

        connection3.invoke("Send", Receiver,Caller, message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    });












</script>



@*<script>

   (function() {
 

  var width = 320;    
  var height = 0;   

 

  var streaming = false;

 

  var video = null;
  var canvas = null;
  var photo = null;
  var startbutton = null;

  function startup() {
    video = document.getElementById('video');
    canvas = document.getElementById('canvas');
    photo = document.getElementById('photo');
    startbutton = document.getElementById('startbutton');

    navigator.mediaDevices.getUserMedia({video: true, audio: false})
    .then(function(stream) {
      video.srcObject = stream;
      video.play();
    })
    .catch(function(err) {
      console.log("An error occurred: " + err);
    });

    video.addEventListener('canplay', function(ev){
      if (!streaming) {
        height = video.videoHeight / (video.videoWidth/width);

       

        if (isNaN(height)) {
          height = width / (4/3);
        }

        video.setAttribute('width', width);
        video.setAttribute('height', height);
        canvas.setAttribute('width', width);
        canvas.setAttribute('height', height);
        streaming = true;
      }
    }, false);

               
      function Save(e) {
    var image = document.getElementById("canvas").toDataURL("image/jpg");
    image = image.replace('data:image/png;base64,', '');
    $.ajax({
        type: 'POST',
        url: '@Url.Action("Add", "Video")',
        data: { imageData: image },
        ajaxasync: true,        
        dataType: 'json',
        success: function (msg) {
            alert('Image saved successfully !');
        }
    });
}


    
    startbutton.addEventListener('click', function(ev){
        takepicture();
        Save();
      ev.preventDefault();
    }, false);

    clearphoto();
  }

  
  function clearphoto() {
    var context = canvas.getContext('2d');
    context.fillStyle = "#AAA";
    context.fillRect(0, 0, canvas.width, canvas.height);

    var data = canvas.toDataURL('image/png');
    photo.setAttribute('src', data);
  }

  

  function takepicture() {
    var context = canvas.getContext('2d');
    if (width && height) {
      canvas.width = width;
      canvas.height = height;
      context.drawImage(video, 0, 0, width, height);

      var data = canvas.toDataURL('image/png');
      photo.setAttribute('src', data);
    } else {
      clearphoto();
    }
  }

  
  window.addEventListener('load', startup, false);
})();

</script>*@





















